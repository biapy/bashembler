#!/usr/bin/env bash

version="1.0.0"

if ! (return 0 2> '/dev/null'); then
  set -o errexit
  set -o nounset
  set -o pipefail
  if [[ "${TRACE-0}" == "1" ]]; then
    set -o xtrace
  fi
fi

# shellcheck source-path=SCRIPTDIR

# shellcheck source-path=SCRIPTDIR

function cecho() {
  local force
  local tput_options
  declare -a tput_options
  local echo_options
  declare -a echo_options
  echo_options=()
  force=0
  while [[ "${1-}" =~ ^(-f|--force|-n|-e|-E)$ ]]; do
    if [[ "${1-}" = "--force" || "${1-}" = "-f" ]]; then
      force=1
    else
      echo_options+=("${1-}")
    fi

    shift
  done

  if [[ ${#} -lt 2 ]]; then
    echo ${echo_options[@]+"${echo_options[@]}"} ${@+"$@"}
    return
  fi

  tput_options=()
  if ! tput 'cols' > '/dev/null' 2>&1; then
    tput_options+=('-Tdumb')
  fi

  local font_index
  local font_value

  declare -a font_index
  declare -a font_value

  font_index=()
  font_value=()

  font_index+=('black')
  font_value+=('setaf 0')
  font_index+=('red')
  font_value+=('setaf 1')
  font_index+=('green')
  font_value+=('setaf 2')
  font_index+=('yellow')
  font_value+=('setaf 3')
  font_index+=('blue')
  font_value+=('setaf 4')
  font_index+=('magenta')
  font_value+=('setaf 5')
  font_index+=('cyan')
  font_value+=('setaf 6')
  font_index+=('white')
  font_value+=('setaf 7')

  font_index+=('bgBlack')
  font_value+=('setab 0')
  font_index+=('bgRed')
  font_value+=('setab 1')
  font_index+=('bgGreen')
  font_value+=('setab 2')
  font_index+=('bgYellow')
  font_value+=('setab 3')
  font_index+=('bgBlue')
  font_value+=('setab 4')
  font_index+=('bgMagenta')
  font_value+=('setab 5')
  font_index+=('bgCyan')
  font_value+=('setab 6')
  font_index+=('bgWhite')
  font_value+=('setab 7')

  font_index+=('bold')
  font_value+=('bold')
  font_index+=('stout')
  font_value+=('smso') # Standout.
  font_index+=('under')
  font_value+=('smul') # Underline.
  font_index+=('blink')
  font_value+=('blink') # Blinking.
  font_index+=('reverse')
  font_value+=('rev') # Exchange foreground & background colors.
  font_index+=('italic')
  font_value+=('sitm')

  local color="${1-}"
  local key
  local color_found=0
  local color_name
  local color_codes=''

  color="${color//INFO/bluebold}"
  color="${color//WARNING/yellowbold}"
  color="${color//ERROR/redbold}"
  color="${color//SUCCESS/greenbold}"
  color="${color//DEBUG/italic}"

  for key in "${!font_index[@]}"; do
    color_name="${font_index[${key}]-}"

    if [[ "${color-}" = *"${color_name-}"* ]]; then
      color_found=1


      color_codes="${color_codes-}$(
        # shellcheck disable=SC2086 # font_value value needs to be splitted.
        tput ${tput_options[@]+"${tput_options[@]}"} ${font_value[${key}]-} || true
      )"

      color="${color//${color_name}/}"
    fi
  done

  if [[ "${color_found-}" -ne 0 ]]; then
    if [[ ! "${color-}" =~ ^[[:space:]]*$ ]]; then
      cecho "ERROR" "Error: '${color}' is not a valid color code." >&2
      return 1
    fi

    shift 1
  fi

  if [[ ! -t 1 && "${force-0}" -eq 0 ]]; then
    echo ${echo_options[@]+"${echo_options[@]}"} ${@+"$@"}
    return
  fi

  echo ${echo_options[@]+"${echo_options[@]}"} \
    "${color_codes-}${*}$(
      tput ${tput_options[@]+"${tput_options[@]}"} 'sgr0' || true
    )"
  return
}

function available-fd() {
  if [[ ${#} -gt 1 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} accepts only one argument." >&2
    return 2
  fi

  local max_fd_count
  local default_fd="${1-}"
  local checked_fd=9

  if [[ -n "${default_fd-}" && ! "${default_fd-0}" =~ ^[0-9]+$ ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]}'s first argument is not an integer." >&"${error_fd-2}"
    return 3
  fi

  max_fd_count="$(ulimit -n)"

  ((max_fd_count > 200)) && max_fd_count=200

  while ((++checked_fd <= max_fd_count)); do
    # shellcheck disable=SC2188 # Ignore a file descriptor availability test.
    if ! <&"${checked_fd-}"; then
      echo -n "${checked_fd-}"
      return 0
    fi
  done 2> '/dev/null'

  echo -n "${default_fd-}"

  return 1
}

# shellcheck source-path=SCRIPTDIR

function in-list() {
  if [[ ${#} -eq 0 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires at least one argument." >&2
    return 1
  fi

  local search="${1-}"
  local list=("${@:2}")

  [[ "${#list[@]}" -eq 0 ]] && return 1

  local previous_ifs="${IFS}"
  IFS='!'

  local search_regexp="^.*[${IFS}]${search}[${IFS}].*\$"
  local searched_list

  searched_list="${IFS}${list[*]}${IFS}"

  IFS="${previous_ifs}"

  if [[ "${searched_list}" =~ ${search_regexp} ]]; then
    return 0
  fi

  return 1
}

# shellcheck source-path=SCRIPTDIR

function realpath() {
  local pure_bash=0
  if [[ "${1-}" = "--pure-bash" ]]; then
    pure_bash=1
    shift
  fi

  if [[ ${#} -ne 1 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires one and only one argument." >&2
    return 1
  fi

  [[ -z "${1-}" ]] && return 1

  local realpath=""

  if [[ "${pure_bash}" -eq 0 ]] \
      && command -v 'greadlink' > '/dev/null'; then
    realpath="$(greadlink -f -- "${1-}" 2> '/dev/null')"
  elif  [[ "${pure_bash}" -eq 1 ]] \
      || ! realpath="$(readlink -f -- "${1-}" 2> '/dev/null')"; then
    local max_symlinks=40
    target="${1-}"
    realpath=""

    [[ -e "${target%/}" ]] || target=${1%"${1##*[!/]}"}
    [[ -d "${target:-/}" ]] && target="${target}/"

    cd -P . 2> /dev/null || return 1
    while [[ "${max_symlinks}" -ge 0 ]] \
            && max_symlinks=$((max_symlinks - 1)); do
      if [[ "${target}" != "${target%/*}" ]]; then
        case "${target}" in
          /*)
            cd -P "${target%/*}/" 2> '/dev/null' \
              || break
            ;;
          *)
            cd -P "./${target%/*}" 2> '/dev/null' \
              || break
            ;;
        esac
        target="${target##*/}"
      fi

      if [[ ! -L "${target}" ]]; then
        target="${PWD%/}${target:+/}${target}"
        realpath="${target:-/}"
        break
      fi

      link="$(ls -dl -- "${target}" 2> /dev/null)" || break
      target="${link#*" ${target} -> "}"
    done
  fi

  [[ -z "${realpath}" ]] && return 1

  echo -n "${realpath}"
  return 0
}

# shellcheck source-path=SCRIPTDIR

# shellcheck source-path=SCRIPTDIR
# shellcheck source-path=SCRIPTDIR/internals

# shellcheck source-path=SCRIPTDIR
# shellcheck source-path=SCRIPTDIR/..

# shellcheck source-path=SCRIPTDIR
# shellcheck source-path=SCRIPTDIR/..

# shellcheck source-path=SCRIPTDIR

function is-array() {
  if [[ ${#} -ne 1 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires one and only one argument." >&2
    return 1
  fi

  local variable_name="${1-}"
  local declaration
  local array_check_regex

  declaration="$(declare -p "${variable_name}" 2> '/dev/null')"
  array_check_regex="^declare -a ${variable_name}='?\("

  [[ "${declaration}" =~ ${array_check_regex} ]]
  return "${?}"

}

function validate-option() {
  if [[ ${#} -lt 1 || ${#} -gt 2 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires one to two arguments." >&2
    return 1
  fi

  if [[ -z "${allowed_options+set}" ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires allowed_options variable to be set." >&2
    return 1
  fi

  if ! is-array 'allowed_options'; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires allowed_options variable to be an array." >&2
    return 1
  fi

  local option_name="${1-}"

  local option_argument="1"

  local mandatory_value=""
  local dashes='--'
  [[ "${#option_name}" -eq 1 ]] && dashes='-'

  if in-list "${option_name}([*&+]?)" "${allowed_options[@]}"; then
    mandatory_value="${BASH_REMATCH[1]}"

    case "${mandatory_value}" in
      '+' | '&')
        if [[ ${#} -eq 1 ]]; then
          cecho 'ERROR' "Error: ${dashes}${option_name} requires an argument." >&2
          return 1
        fi
        ;;
      '*')
        : # noop, nothing to do.
        ;;
      *)
        if [[ ${#} -eq 2 ]]; then
          cecho 'ERROR' "Error: ${dashes}${option_name} does not accept arguments." >&2
          return 1
        fi
        ;;
    esac

    if [[ ${#} -eq 2 ]]; then
      option_argument="${2}"
    fi

    printf -v "${option_name//[^[:alnum:]]/_}" "%s" "${option_argument}"

    processed_options+=("${option_name}")
    return 0
  fi

  cecho 'ERROR' "Error: option '${dashes}${option_name}' is not recognized." >&2
  return 1
}

function process-long-option() {
  if [[ ${#} -ne 1 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires only one argument." >&2
    return 1
  fi

  if [[ "${1-}" =~ ^--([^[:space:]=]+)(=?)(.*)$ ]]; then
    validate_option_arguments=("${BASH_REMATCH[1]}")

    if [[ ${BASH_REMATCH[2]} = '=' ]]; then
      validate_option_arguments+=("${BASH_REMATCH[3]}")
    fi

    validate-option "${validate_option_arguments[@]}"
    return ${?}
  fi

  return 2
}

# shellcheck source-path=SCRIPTDIR
# shellcheck source-path=SCRIPTDIR/..

function process-short-options() {
  if [[ ${#} -ne 1 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires only one argument." >&2
    return 1
  fi

  if [[ "${1-}" =~ ^-([a-zA-Z]*)$ ]]; then
    short_options_list="${BASH_REMATCH[1]}"
    for ((option_index = 0; option_index < ${#short_options_list}; option_index++)); do
      option_name="${short_options_list:${option_index}:1}"
      validate-option "${option_name}" || return ${?}
    done

    return 0
  fi

  return 2
}

function process-options() {
  if [[ ${#} -eq 0 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires at least one argument." >&2
    return 1
  fi

  local allowed_options_list="${1-}"
  local allowed_options=()
  local processed_options=()
  local return_code
  local option_name=''
  local cleaned_option_name=''

  shift

  IFS=' ' read -r -a 'allowed_options' <<< "${allowed_options_list}"

  arguments=()

  while [[ "${#}" -gt 0 && "${1}" != '--' ]]; do # For each function argument until a '--'.
    return_code=0
    process-long-option "${1}" \
      || return_code=${?}

    [[ ${return_code} -eq 1 ]] && return 1

    if [[ ${return_code} -eq 2 ]]; then
      return_code=0
      process-short-options "${1}" \
        || return_code=${?}

      [[ ${return_code} -eq 1 ]] && return 1

      [[ ${return_code} -eq 2 ]] && arguments+=("${1}")
    fi

    shift
  done

  [[ "${1-}" = '--' ]] && shift && arguments+=(${@+"$@"})

  for option_name in ${allowed_options[@]+"${allowed_options[@]}"}; do
    cleaned_option_name="${option_name%[+*]}"

    if [[ "${cleaned_option_name}+" = "${option_name}" ]]; then
      if ! in-list "${cleaned_option_name}" ${processed_options[@]+"${processed_options[@]}"}; then
        cecho 'ERROR' "Error: --${cleaned_option_name} is missing." >&2
        return 1
      fi
    fi
  done

  return 0
}

# shellcheck source-path=SCRIPTDIR

function repeat-string() {
  if [[ ${#} -ne 2 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires two and only two arguments." >&2
    return 1
  fi

  local quantity="${1}"
  local repeated="${2}"
  local spacing=""

  if [[ -z "${quantity-}" || ! "${quantity-0}" =~ ^[0-9]+$ ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]}'s first argument is not an integer." >&2
    return 2
  fi

  # shellcheck disable=SC2183
  printf -v 'spacing' '%*s' "${quantity-0}"

  echo -n "${spacing// /${repeated-}}"

  return 0
}

# shellcheck source-path=SCRIPTDIR

function sourced-file-path {
  local allowed_options
  local arguments
  local origin=''
  local quiet=0
  local verbose=0
  local source_command
  local file
  local file_realpath
  local cleaned_file
  local input_folder
  local fd_target
  local error_fd
  local verbose_fd

  in-list "(-q|--quiet)" ${@+"$@"} && quiet=1
  in-list "(-v|--verbose)" ${@+"$@"} && verbose=1

  if error_fd="$(available-fd '2')"; then
    ((quiet)) && fd_target='/dev/null' || fd_target='&2'
    eval "exec ${error_fd-2}>${fd_target-&2}"
  fi

  if verbose_fd="$(available-fd '2')"; then
    ((verbose)) && fd_target='&2' || fd_target='/dev/null'
    eval "exec ${verbose_fd-2}>${fd_target-'/dev/null'}"
    cecho "DEBUG" "Debug: ${FUNCNAME[0]}'s verbose mode enabled." >&"${verbose_fd-2}"
  fi

  function close-fds() {
    [[ "${error_fd-2}" -ne 2 ]] && eval "exec ${error_fd-}>&-"
    [[ "${verbose_fd-2}" -ne 2 ]] && eval "exec ${verbose_fd-}>&-"
  }

  declare -a arguments
  declare -a allowed_options
  allowed_options=('verbose' 'quiet' 'origin&')

  if ! process-options "${allowed_options[*]}" ${@+"$@"} 2>&"${error_fd-2}"; then
    close-fds
    return 2
  fi

  if [[ ${#arguments[@]} -ne 1 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires one and only one argument." >&"${error_fd-2}"
    close-fds
    return 1
  fi

  source_command="${arguments[0]}"

  cecho 'DEBUG' "Debug: Extracting file path from source command '${source_command-}'." >&"${verbose_fd-2}"
  # shellcheck disable=SC1003
  file="$(echo "${source_command-}" \
    | sed -Ee 's#^[[:blank:]]*(source|\.)[[:blank:]]+("((\\"|[^"])*)"|'\''((\\'\''|[^'\''])*)'\''|((\\[ \t]|[^ \t])*))?[[:blank:]]*(;.*|\#.*)?$#\3\5\7#' \
    || true)"
  cecho 'DEBUG' "Debug: Detected file path '${file-}'." >&"${verbose_fd-2}"

  if [[ "${file-}" = "${source_command-}" ]]; then
    cecho "ERROR" "Error: unable to extract file from command '${source_command-}'." >&"${error_fd-2}"
    close-fds
    return 5
  fi

  if [[ -z "${origin-}" ]]; then
    cecho 'DEBUG' "Debug: Sourced file origin was not provided." >&"${verbose_fd-2}"
    echo "${file-}"
    return 0
  fi

  input_folder="$(dirname "$(realpath "${origin-}" || true)")"

  if [[ "${file-}" =~ ^/ ]]; then
    cecho 'DEBUG' "Debug: Sourced file path is absolute: '${file-}'." >&"${verbose_fd-2}"

    file_realpath="$(realpath "${file-}")"
  elif [[ "${file-}" =~ ^\$\{BASH_SOURCE\[0\]%/\*\} ]]; then
    cecho 'DEBUG' "Debug: Sourced file starts with variable parts." >&"${verbose_fd-2}"
    cecho 'DEBUG' "Debug: Removing variable parts from '${file-}'" >&"${verbose_fd-2}"
    # shellcheck disable=SC2016
    cleaned_file="${file#\$\{BASH_SOURCE\[0\]%\/\*\}\/}"
    cecho 'DEBUG' "Debug: Removal result is '${cleaned_file-}'" >&"${verbose_fd-2}"

    cecho 'DEBUG' "Debug: Finding realpath for '${input_folder-}/${cleaned_file-}'" >&"${verbose_fd-2}"
    file_realpath="$(realpath "${input_folder-}/${cleaned_file-}")"
  else
    cecho 'DEBUG' "Debug: Sourced file path is relative: '${file-}'." >&"${verbose_fd-2}"
    cecho 'DEBUG' "Debug: Finding realpath for '${input_folder-}/${file-}'" >&"${verbose_fd-2}"
    file_realpath="$(realpath "${input_folder-}/${file-}")"
  fi

  if [[ -z "${file_realpath-}" ]]; then
    cecho 'ERROR' "Error: sourced file '${file-}' does not exists." >&"${error_fd-2}"
    close-fds
    return 6
  elif [[ ! -e "${file_realpath-}" ]]; then
    cecho 'ERROR' "Error: sourced file '${file-}' (real path '${file_realpath-}') does not exists." >&"${error_fd-2}"
    close-fds
    return 6
  fi

  cecho 'DEBUG' "Debug: sourced file realpath is '${file_realpath-}'" >&"${verbose_fd-2}"
  echo "${file_realpath-}"
  close-fds
  return 0
}

function include-sources() {
  local allowed_options
  local arguments
  local quiet=0
  local verbose=0
  local discard_comments=0
  local origin=''
  local input
  local output='/dev/stdout'
  local fd_target
  local error_fd
  local verbose_fd
  local options
  local include_options

  local return_code
  local line
  local line_count
  local source_command
  local sourced_file
  local level=0
  local indent=''
  local indent_string=' | '

  in-list "(-q|--quiet)" ${@+"$@"} && quiet=1
  in-list "(-v|--verbose)" ${@+"$@"} && verbose=1

  if error_fd="$(available-fd '2')"; then
    ((quiet)) && fd_target='/dev/null' || fd_target='&2'
    eval "exec ${error_fd-2}>${fd_target-&2}"
  fi

  if verbose_fd="$(available-fd '2')"; then
    ((verbose)) && fd_target='&2' || fd_target='/dev/null'
    eval "exec ${verbose_fd-2}>${fd_target-'/dev/null'}"
    cecho "DEBUG" "Debug: ${FUNCNAME[0]}'s verbose mode enabled." >&"${verbose_fd-2}"
  fi

  cecho "DEBUG" "Debug: entering function ${FUNCNAME[0]}" ${@+"$@"} "." >&"${verbose_fd-2}"

  function close-fds() {
    [[ "${error_fd-2}" -ne 2 ]] && eval "exec ${error_fd-}>&-"
    [[ "${verbose_fd-2}" -ne 2 ]] && eval "exec ${verbose_fd-}>&-"
  }

  declare -a arguments
  arguments=()
  declare -a allowed_options
  allowed_options=('verbose' 'quiet' 'discard-comments' 'level&' 'origin&' 'output&')
  cecho "DEBUG" "Debug: processing options." >&"${verbose_fd-2}"
  if ! process-options "${allowed_options[*]}" ${@+"$@"} 2>&"${error_fd-2}"; then
    cecho "DEBUG" "Debug: options processing failed." >&"${verbose_fd-2}"
    close-fds
    return 2
  fi

  declare -a options
  options=()
  [[ "${quiet-0}" -ne 0 ]] && options+=('--quiet')
  [[ "${verbose-0}" -ne 0 ]] && options+=('--verbose')

  declare -a include_options
  include_options=()
  [[ "${discard_comments-0}" -ne 0 ]] && include_options+=('--discard-comments')

  if [[ -z "${level}" || ! "${level}" =~ ^[0-9]+$ ]]; then
    cecho "ERROR" "Error: --level value is not an integer." >&"${error_fd-2}"
    close-fds
    return 2
  fi

  cecho "DEBUG" "Debug: checking provided arguments count." >&"${verbose_fd-2}"
  if [[ ${#arguments[@]} -ne 1 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires one and only one argument." >&"${error_fd-2}"
    close-fds
    return 1
  fi

  input="${arguments[0]-}"

  [[ "${output--}" = "-" ]] && output="/dev/stdout"

  cecho "DEBUG" "Debug: check if input file '${input-}' exists." >&"${verbose_fd-2}"
  if [[ ! -e "${input}" ]]; then
    cecho "ERROR" "Error: file '${input-}' does not exists." >&"${error_fd-2}"
    close-fds
    return 3
  fi

  cecho "DEBUG" "Debug: check if output file can be created in given path." >&"${verbose_fd-2}"
  if [[ "${output-'/dev/stdout'}" != "/dev/stdout" && ! -d "$(dirname "${output-/dev/stdout}")" ]]; then
    cecho "ERROR" "Error: file '${output-}' directory does not exists." >&"${error_fd-2}"
    close-fds
    return 4
  fi

  indent="$(repeat-string "${level}" "${indent_string}")"

  if [[ -z "${origin-}" ]]; then
    if ((level > 0)); then
      cecho "ERROR" "Error: --level option requires --origin to be specified." >&"${error_fd-2}"
      close-fds
      return 2
    fi

    cecho "DEBUG" "Debug: initialization of output file." >&"${verbose_fd-2}"
    if [[ "${output-'/dev/stdout'}" != "/dev/stdout" ]]; then
      if ! (echo -n "" > "${output-'/dev/stdout'}") 2>&"${verbose_fd-2}"; then
        cecho "ERROR" "Error: error while initializing '${output-}'." >&"${error_fd-2}"
        close-fds
        return 4
      fi
    fi

    cecho 'SUCCESS' "Assembling ${input-}" >&"${error_fd-2}"

    local sourced_files=()
  elif ((level > 0)); then
    cecho 'SUCCESS' "${indent}${input##*/}" >&"${error_fd-2}"
  fi

  cecho "DEBUG" "Debug: looping over input file '${input-}' lines." >&"${verbose_fd-2}"
  line=''
  line_count=0
  # shellcheck disable=SC2094
  while IFS='' read -r 'line' || [[ -n "${line-}" ]]; do
    ((++line_count))

    cecho "DEBUG" "Debug: processing line n°${line_count-} of '${input-}'." >&"${verbose_fd-2}"
    cecho "DEBUG" "Debug: line n°${line_count-} is '${line-}'." >&"${verbose_fd-2}"

    if [[ -n "${origin}" && "${line_count}" -eq 1 && "${line}" =~ ^\#\! ]]; then
      cecho 'DEBUG' "Debug: discarding shebang at line ${line_count} of file '${input}'." >&"${verbose_fd-2}"
      continue
    fi

    # Discard comments except initial shebang and shellcheck directives.
    if [[ "${discard_comments}" -ne 0 && "${line}" =~ ^[[:blank:]]*\# &&
          ! "${line}" == *"shellcheck"* &&
          ! (-z "${origin}" && "${line_count}" -eq 1)   ]]; then
      cecho 'DEBUG' "Debug: discarding comment at line ${line_count} of file '${input}'." >&"${verbose_fd-2}"
      continue
    fi

    source_command="$(echo "${line-}" \
      | grep --extended-regexp '^[[:blank:]]*(source|\.)[[:blank:]]' || true)"

    if [[ -z "${source_command-}" ]]; then
      echo -E "${line-}" >> "${output-'/dev/stdout'}"
      continue
    fi

    cecho 'DEBUG' "Debug: detected source command '${source_command}' at line ${line_count} of file '${input}'." >&"${verbose_fd-2}"
    sourced_file=''
    if [[ -n "${origin}" ]]; then
      cecho 'DEBUG' "Debug: trying to get source file relative to origin '${origin}'." >&"${verbose_fd-2}"
      if ! sourced_file="$(
        sourced-file-path ${options[@]+"${options[@]}"} \
          --origin="${origin-}" \
          "${source_command-}" 2>&"${verbose_fd-2}"
      )"; then
        sourced_file=''
      fi
    fi

    if [[ -z "${sourced_file}" ]]; then
      cecho 'DEBUG' "Debug: trying to get source file relative to input '${input}'." >&"${verbose_fd-2}"
      if sourced_file="$(
        sourced-file-path ${options[@]+"${options[@]}"} \
          --origin="${input-}" \
          "${source_command-}" 2>&"${verbose_fd-2}"
      )"; then
        :
      else
        return_code="${?}"
        cecho "ERROR" "Error: can not resolve command '${source_command-}' in file '${input}'." >&"${error_fd-2}"
        close-fds
        return "${return_code}"
      fi
    fi

    if [[ -z "${sourced_file-}" ]]; then
      continue
    fi

    local source_origin="${input-}"
    [[ -n "${origin-}" ]] && source_origin="${origin-}"

    if [[ " ${sourced_files[*]-} " == *" ${sourced_file-} "* ]]; then
      cecho 'INFO' "${indent}${indent_string}${sourced_file##*/} skipped." >&"${error_fd-2}"
      continue
    fi

    sourced_files+=("${sourced_file-}")

    cecho 'DEBUG' "Debug: including file '${sourced_file}' in output." >&"${verbose_fd-2}"

    if include-sources ${options[@]+"${options[@]}"} \
        ${include_options[@]+"${include_options[@]}"} \
        --level=$((level + 1)) \
        --origin="${source_origin-}" \
        --output="${output-'/dev/stdout'}" \
        "${sourced_file-}"; then
      :
    else
      return_code="${?}"
      if [[ -z "${origin-}" ]]; then
        cecho "ERROR" "Error: failed during assembly of file '${input-}'." >&"${error_fd-2}"
      else
        cecho "ERROR" "Error: failed including file '${source_origin-}' in '${input-}'." >&"${error_fd-2}"
      fi
      close-fds
      return "${return_code}"
    fi

  done < "${input-}"

  cecho "DEBUG" "Debug: end of file '${input-}' processing." >&"${verbose_fd-2}"

  close-fds
  return 0
}

#     and checked using shellcheck.
function bashembler() {
  local quiet=0
  local verbose=0
  local overwrite=0
  local discard_comments=0
  local input_path=''
  local output_path='-'
  local fd_target
  local error_fd
  local verbose_fd
  local options
  local result_code
  declare -a options

  in-list "(-q|--quiet)" ${@+"$@"} && quiet=1
  in-list "(-v|--verbose)" ${@+"$@"} && verbose=1

  if error_fd="$(available-fd '2')"; then
    ((quiet)) && fd_target='/dev/null' || fd_target='&2'
    eval "exec ${error_fd-2}>${fd_target-&2}"
  fi

  if verbose_fd="$(available-fd '2')"; then
    ((verbose)) && fd_target='&2' || fd_target='/dev/null'
    eval "exec ${verbose_fd-2}>${fd_target-'/dev/null'}"
    cecho "DEBUG" "Debug: ${FUNCNAME[0]}'s verbose mode enabled." >&"${verbose_fd-2}"
  fi

  close-fds() {
    [[ "${error_fd-2}" -ne 2 ]] && eval "exec ${error_fd-}>&-"
    [[ "${verbose_fd-2}" -ne 2 ]] && eval "exec ${verbose_fd-}>&-"
  }

  function usage() {
    cat << 'EOF'
Bashembler v${version}
Homepage: https://github.com/biapy/bashembler

bashembler assembles shell scripts splitted across multiple files into a
one-file script, ready for deployment. By default, bashembler output assembled
script on /dev/stdout. Use --output option to write assembled script to file.

Usage:

  bashembler [ -h | -? | --help ] [ -V | --version ] [ -q | --quiet ]
    [ -v | --verbose ] [ -c | --discard-comments ] [ -w | --overwrite]
    [ --o <final-script.bash> | --output=<final-script.bash> ]
    <splitted-script.bash>

Where:

  -h, -?, --help          Display usage information.
  -V, --version           Display version.
  -q, --quiet             Disable error message output.
  -v, --verbose           Enable verbose mode.
  -c, --discard-comments  Remove comment lines from assembled file.
  -w, --overwrite         Overwrite output path if it is an existing file.
  -o <output-path>, --output=<output-path>
                          Write output to given path.

EOF
  }

  while :; do
    case "${1-}" in
      '-h' | '-?' | '--help')
        usage
        return 0
        ;;
      '-V' | '--version')
        echo "Bashembler v${version}"
        return 0
        ;;
      '-v' | '--verbose')
        verbose=1
        ;;
      '-q' | '--quiet')
        quiet=1
        ;;
      '-c' | '--discard-comments')
        discard_comments=1
        ;;
      '-w' | '--overwrite')
        overwrite=1
        ;;
      '-o' | '--output')
        if [[ -n "${2-}" ]]; then
          output_path="${2-}"
          shift
        else
          cecho 'ERROR' "Error: --output requires an non-empty option argument." >&"${error_fd-2}"
          close-fds
          return 2
        fi
        ;;
      '--output='?*)
        output_path="${1#*=}"
        ;;
      '--output=')
        cecho 'ERROR' "Error: --output requires an non-empty option argument." >&"${error_fd-2}"
        close-fds
        return 2
        ;;
      '--') # End of all options.
        shift
        break
        ;;
      '-'?*)
        cecho 'ERROR' "Error: option '${1}' is not recognized." >&"${error_fd-2}"
        close-fds
        return 2
        ;;
      *)
        break
        ;;
    esac

    shift
  done

  if [[ ${#} -ne 1 ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} accept one and only one argument." >&"${error_fd-2}"
    close-fds
    return 1
  fi

  input_path="${1-}"

  if [[ -z "${input_path}" ]]; then
    cecho "ERROR" "Error: ${FUNCNAME[0]} requires a valid file path as argument." >&"${error_fd-2}"
    close-fds
    return 3
  fi

  if [[ "${output_path}" != '-' &&
    -e "${output_path}" &&
    "${overwrite}" -eq 0 ]]; then
    cecho "ERROR" "Error: output path '${output_path}' already exists. Use --overwrite to allow overwriting." >&"${error_fd-2}"
    close-fds
    return 4
  fi

  options=()
  [[ "${quiet-0}" -ne 0 ]] && options+=('--quiet')
  [[ "${verbose-0}" -ne 0 ]] && options+=('--verbose')
  [[ "${discard_comments-0}" -ne 0 ]] && options+=('--discard-comments')

  include-sources ${options[@]+"${options[@]}"} \
    --output="${output_path}" "${input_path}"
  result_code="${?}"

  close-fds
  return "${result_code}"
}

if ! (return 0 2> '/dev/null'); then
  bashembler "${@}"
  exit ${?}
fi
